/*
 * Copyright 2016 Futurice GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.futurice.freesound.network.api.model

import java.util.Collections
import java.util.HashSet

import com.futurice.freesound.common.utils.Preconditions.get

/**
 * TODO This could be auto-generated by an annotation processor
 */
class SoundFields private constructor(private val fields: Set<String>) {

    override fun toString(): String = fields.joinToString(separator = ",")

    private class Builder {

        private val fields = HashSet<String>()

        internal fun id(): Builder {
            add(ID)
            return this
        }

        internal fun url(): Builder {
            add(URL)
            return this
        }

        internal fun name(): Builder {
            add(NAME)
            return this
        }

        internal fun tags(): Builder {
            add(TAGS)
            return this
        }

        internal fun description(): Builder {
            add(DESCRIPTION)
            return this
        }

        internal fun geotag(): Builder {
            add(GEOTAG)
            return this
        }

        internal fun username(): Builder {
            add(USERNAME)
            return this
        }

        internal fun images(): Builder {
            add(IMAGES)
            return this
        }

        internal fun previews(): Builder {
            add(PREVIEWS)
            return this
        }

        internal fun duration(): Builder {
            add(DURATION)
            return this
        }

        internal fun created(): Builder {
            add(CREATED)
            return this
        }

        private fun add(field: String) {
            fields.add(field)
        }

        internal fun build(): SoundFields {
            return SoundFields(Collections.unmodifiableSet(fields))
        }

    }

    companion object {

        val BASE = SoundFields.Builder()
            .id()
            .url()
            .name()
            .tags()
            .description()
            .geotag()
            .username()
            .images()
            .previews()
            .duration()
            .created()
            .build()

        private val ID = "id"
        private val URL = "url"
        private val NAME = "name"
        private val TAGS = "tags"
        private val DESCRIPTION = "description"
        private val GEOTAG = "geotag"
        private val USERNAME = "username"
        private val IMAGES = "images"
        private val PREVIEWS = "previews"
        private val DURATION = "duration"
        private val CREATED = "created"
    }

}
